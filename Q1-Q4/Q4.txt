Q4 - Assume all method calls work fine. Fix the memory leak issue in below method

void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId) {
	Player* player = g_game.getPlayerByName(recipient);
	if (!player) {
		player = new Player(nullptr);
			if (!IOLoginData::loadPlayerByName(player, recipient)) {
			return;
		}
	}

	Item* item = Item::CreateItem(itemId);

	if (!item) {
		return;
	}

	g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT);

	if (player->isOffline()) {
		IOLoginData::savePlayer(player);
	}
}

A4
Variant 1
void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId) {
	Player* player = g_game.getPlayerByName(recipient);
	if (!player) {
		player = new Player(nullptr);
			if (!IOLoginData::loadPlayerByName(player, recipient)) {
			delete player; // Free memory before returning
			return;
		}
	}

	Item* item = Item::CreateItem(itemId);

	if (!item) {
		delete player; // Free memory before returning
		return;
	}

	g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT);

	if (player->isOffline()) {
		IOLoginData::savePlayer(player);
	}
	else {
        delete player; // Free memory if player is online
    }
}

V2 Smart pointers

void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId) {
  // Use std::unique_ptr for player management
  std::unique_ptr<Player> player;

  // Check for existing player using getPlayerByName
  player = std::make_unique<Player>(g_game.getPlayerByName(recipient));

  if (!player) {
    player = std::make_unique<Player>(nullptr);
    if (!IOLoginData::loadPlayerByName(player.get(), recipient)) {
      return;
    }
  }

  std::unique_ptr<Item> item = Item::CreateItem(itemId);

  if (!item) {
    return;
  }

  g_game.internalAddItem(player->getInbox(), item.get(), INDEX_WHEREEVER, FLAG_NOLIMIT);

  if (player->isOffline()) {
    IOLoginData::savePlayer(player.get());
  }
}